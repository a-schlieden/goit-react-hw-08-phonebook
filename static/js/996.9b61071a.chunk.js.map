{"version":3,"file":"static/js/996.9b61071a.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","webpack://goit-react-hw-08-phonebook/./src/components/ContactListItem/ContactListItem.module.css?7127","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formbtn\":\"ContactForm_formbtn__5569G\"};","import { useState } from \"react\";\nimport { toast } from 'react-toastify';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport style from './ContactForm.module.css';\nimport { addContact } from \"redux/contacts/contacts.thunk\";\n\nexport const ContactForm = () => {\n  const contactsFromBack = useSelector((state) => state.contacts.contacts.items)\n  const dispatch = useDispatch()\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const onDataChange = (event) => {\n    switch (event.target.name) {\n      case 'name':\n        setName(event.target.value);\n        break;\n      case 'number':\n        setNumber(event.target.value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const AddNewContact = () => {\n\n    if (onDoppleContactInfoAdd(name, number)) {\n      toast.error(`Contact \"${name}\" or number \"${number}\" is already in your contactlist!`);\n      return;\n    }\n    const newContact = {\n      name: name,\n      number: number,\n    }\n    dispatch(addContact(newContact))\n  }\n\n  const onDoppleContactInfoAdd = () => {\n    return contactsFromBack.find(contact => contact.number === number || contact.name === name);\n  }\n\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n    AddNewContact();\n    setName('');\n    setNumber('');\n\n  };\n\n  return (\n    <div>\n      <form onSubmit={onFormSubmit}>\n        <label>\n          Name:\n          <br />\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={onDataChange}\n          />\n        </label>\n        <label >\n          Number:\n          <br />\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={onDataChange}\n          />\n        </label>\n        <button type=\"submit\" className={style.formbtn}>Add Contact</button>\n      </form>\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"FilterFormInput\":\"Filter_FilterFormInput__jJb-w\",\"filterwrapp\":\"Filter_filterwrapp__NnCRC\"};","import React from \"react\";\nimport style from './Filter.module.css';\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { setFilter } from \"../../redux/contacts/filter.slice\"\nimport { Filtered } from \"../../redux/selectors\"\n\nexport const Filter = () => {\n\n  const dispatch = useDispatch();\n  const filter = useSelector(Filtered)\n\n  const onFilterChange = (query) => {\n    dispatch(setFilter(query))\n  }\n\n  return (\n    <div className={style.filterwrapp}>\n      <h3>Find contacts by name</h3>\n      <label>\n        <input\n          type=\"text\"\n          value={filter}\n          onChange={(event) => onFilterChange(event.target.value)} />\n      </label>\n    </div>\n  );\n};\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"contactwrap\":\"ContactList_contactwrap__SlaYV\",\"contactList\":\"ContactList_contactList__UFVCg\",\"contactListItem\":\"ContactList_contactListItem__3th7-\"};","// extracted by mini-css-extract-plugin\nexport default {\"contactListBtn\":\"ContactListItem_contactListBtn__0g-H4\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport style from './ContactListItem.module.css';\n\nexport const ContactListItem = ({ name, number, deleteContact }) => {\n\n  return (\n    <>\n      <div\n        style={{\n          display: 'flex'\n        }}\n      >\n        <p>{name}</p>\n        <p>{number}</p>\n      </div>\n      <button onClick={deleteContact} className={style.contactListBtn}>\n        Remove\n      </button>\n    </>\n  );\n};\n\nContactListItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n","import React from \"react\"\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport style from './ContactList.module.css';\nimport { ContactListItem } from \"components/ContactListItem/ContactListItem\";\nimport { STATUS } from \"constants/constants\";\nimport { SelectedContacts, Status, AllContacts } from \"../../redux/selectors\"\nimport { fetchContacts, deleteContact } from \"redux/contacts/contacts.thunk\";\nimport { Loader } from 'components/Loader/Loader';\n\nexport const ContactList = () => {\n\n    const dispatch = useDispatch()\n\n    const status = useSelector(Status)\n    const FilteredContacts = useSelector(SelectedContacts)\n    const totalContacts = useSelector(AllContacts)\n\n    useEffect(() => {\n        dispatch(fetchContacts())\n    }, [dispatch])\n\n    const onDeleteContact = (id) => {\n        dispatch(deleteContact(id))\n    }\n\n    return (\n        <div className={style.contactwrap}>\n            <h2>My contacts </h2>\n            {(status === STATUS.idle || status === STATUS.loading) && <Loader />}\n\n            {FilteredContacts.length === 0 ?\n                (<p>No saved contacts</p>) :\n                (\n                    <>\n                        <p>You have {totalContacts.length} contacts</p>\n                        <ul className={style.contactList}>\n                            {FilteredContacts.map(item => (\n                                <li key={item.id} className={style.contactListItem}>\n                                    <ContactListItem\n                                        name={item.name}\n                                        number={item.number}\n                                        id={item.id}\n                                        deleteContact={() => onDeleteContact(item.id)}\n                                    />\n                                </li>\n                            ))}\n                        </ul>\n                    </>\n                )\n            }\n        </div>\n    );\n};\n\n\n","\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport style from './pages.module.css';\n\nconst MyContacts = () => {\n    return (\n        <div className={style.pagesWrapp}>\n            <div className={style.contactsWrapp}>\n                <ContactList />\n                <Filter />\n            </div>\n            <hr />\n            <ContactForm />\n        </div>\n    )\n}\n\nexport default MyContacts"],"names":["ContactForm","contactsFromBack","useSelector","state","contacts","items","dispatch","useDispatch","useState","name","setName","number","setNumber","onDataChange","event","target","value","onDoppleContactInfoAdd","find","contact","onSubmit","preventDefault","toast","newContact","addContact","AddNewContact","type","pattern","title","required","onChange","className","style","Filter","filter","Filtered","query","setFilter","ContactListItem","deleteContact","display","onClick","ContactList","status","Status","FilteredContacts","SelectedContacts","totalContacts","AllContacts","useEffect","fetchContacts","STATUS","Loader","length","map","item","id"],"sourceRoot":""}